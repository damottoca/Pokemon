package Pokemon

import Pokemon.Pokemon.Pokemon

enum class Clima { ENSOLARADO, CHUVA, NEBLINA, NEUTRO
}


var pokemonsJogador1 = mutableListOf<Pair<String, Map<String, List<String>>>>()
var pokemonsJogador2 = mutableListOf<Pair<String, Map<String, List<String>>>>()
val pokemons = Pokemons()
val pokedex = mapOf(
    1 to pokemons.bulbasaur,
    2 to pokemons.ivysaur,
    3 to pokemons.venusaur,
    4 to pokemons.charmander,
    5 to pokemons.charmeleon,
    6 to pokemons.charizard,
    7 to pokemons.squirtle,
    8 to pokemons.wartortle,
    9 to pokemons.blastoise,
    10 to pokemons.caterpie,
    11 to pokemons.metapod,
    12 to pokemons.butterfree,
    13 to pokemons.weedle,
    14 to pokemons.kakuna,
    15 to pokemons.beedrill,
    16 to pokemons.pidgey,
    17 to pokemons.pidgeotto,
    18 to pokemons.pidgeot,
    19 to pokemons.rattata,
    20 to pokemons.raticate,
    21 to pokemons.spearow,
    22 to pokemons.fearow,
    23 to pokemons.ekans,
    24 to pokemons.arbok,
    25 to pokemons.pikachu,
    26 to pokemons.raichu,
    27 to pokemons.sandshrew,
    28 to pokemons.sandslash,
    29 to pokemons.nidoranf,
    30 to pokemons.nidorina,
    31 to pokemons.nidoqueen,
    32 to pokemons.nidoranm,
    33 to pokemons.nidorino,
    34 to pokemons.nidoking,
    35 to pokemons.clefairy,
    36 to pokemons.clefable,
    37 to pokemons.vulpix,
    38 to pokemons.ninetales,
    39 to pokemons.jigglypuff,
    40 to pokemons.wigglytuff,
    41 to pokemons.zubat,
    42 to pokemons.golbat,
    43 to pokemons.oddish,
    44 to pokemons.gloom,
    45 to pokemons.vileplume,
    46 to pokemons.paras,
    47 to pokemons.parasect,
    48 to pokemons.venonat,
    49 to pokemons.venomoth,
    50 to pokemons.diglett,
    51 to pokemons.dugtrio,
    52 to pokemons.meowth,
    53 to pokemons.persian,
    54 to pokemons.psyduck,
    55 to pokemons.golduck,
    56 to pokemons.mankey,
    57 to pokemons.primeape,
    58 to pokemons.growlithe,
    59 to pokemons.arcanine,
    60 to pokemons.poliwag,
    61 to pokemons.poliwhirl,
    62 to pokemons.poliwrath,
    63 to pokemons.abra,
    64 to pokemons.kadabra,
    65 to pokemons.alakazam,
    66 to pokemons.machop,
    67 to pokemons.machoke,
    68 to pokemons.machamp,
    69 to pokemons.bellsprout,
    70 to pokemons.weepinbell,
    71 to pokemons.victreebel,
    72 to pokemons.tentacool,
    73 to pokemons.tentacruel,
    74 to pokemons.geodude,
    75 to pokemons.graveler,
    76 to pokemons.golem,
    77 to pokemons.ponyta,
    78 to pokemons.rapidash,
    79 to pokemons.slowpoke,
    80 to pokemons.slowbro,
    81 to pokemons.magnemite,
    82 to pokemons.magneton,
    83 to pokemons.farfetchd,
    84 to pokemons.doduo,
    85 to pokemons.dodrio,
    86 to pokemons.seel,
    87 to pokemons.dewgong,
    88 to pokemons.grimer,
    89 to pokemons.muk,
    90 to pokemons.shellder,
    91 to pokemons.cloyster,
    92 to pokemons.gastly,
    93 to pokemons.haunter,
    94 to pokemons.gengar,
    95 to pokemons.onix,
    96 to pokemons.drowzee,
    97 to pokemons.hypno,
    98 to pokemons.krabby,
    99 to pokemons.kingler,
    100 to pokemons.voltorb,
    101 to pokemons.electrode,
    102 to pokemons.exeggcute,
    103 to pokemons.exeggutor,
    104 to pokemons.cubone,
    105 to pokemons.marowak,
    106 to pokemons.hitmonlee,
    107 to pokemons.hitmonchan,
    108 to pokemons.lickitung,
    109 to pokemons.koffing,
    110 to pokemons.weezing,
    111 to pokemons.rhyhorn,
    112 to pokemons.rhydon,
    113 to pokemons.chansey,
    114 to pokemons.tangela,
    115 to pokemons.kangaskhan,
    116 to pokemons.horsea,
    117 to pokemons.seadra,
    118 to pokemons.goldeen,
    119 to pokemons.seaking,
    120 to pokemons.staryu,
    121 to pokemons.starmie,
    122 to pokemons.mrMime,
    123 to pokemons.scyther,
    124 to pokemons.jynx,
    125 to pokemons.electabuzz,
    126 to pokemons.magmar,
    127 to pokemons.pinsir,
    128 to pokemons.tauros,
    129 to pokemons.magikarp,
    130 to pokemons.gyarados,
    131 to pokemons.lapras,
    132 to pokemons.ditto,
    133 to pokemons.eevee,
    134 to pokemons.vaporeon,
    135 to pokemons.jolteon,
    136 to pokemons.flareon,
    137 to pokemons.porygon,
    138 to pokemons.omanyte,
    139 to pokemons.omastar,
    140 to pokemons.kabuto,
    141 to pokemons.kabutops,
    142 to pokemons.aerodactyl,
    143 to pokemons.snorlax,
    144 to pokemons.articuno,
    145 to pokemons.zapdos,
    146 to pokemons.moltres,
    147 to pokemons.dratini,
    148 to pokemons.dragonair,
    149 to pokemons.dragonite,
    150 to pokemons.mewtwo,
    151 to pokemons.mew
)
val listaNomesPokemons = mapOf(
    1 to "bulbasaur",
    2 to "ivysaur",
    3 to "venusaur",
    4 to "charmander",
    5 to "charmeleon",
    6 to "charizard",
    7 to "squirtle",
    8 to "wartortle",
    9 to "blastoise",
    10 to "caterpie",
    11 to "metapod",
    12 to "butterfree",
    13 to "weedle",
    14 to "kakuna",
    15 to "beedrill",
    16 to "pidgey",
    17 to "pidgeotto",
    18 to "pidgeot",
    19 to "rattata",
    20 to "raticate",
    21 to "spearow",
    22 to "fearow",
    23 to "ekans",
    24 to "arbok",
    25 to "pikachu",
    26 to "raichu",
    27 to "sandshrew",
    28 to "sandslash",
    29 to "nidoranF",
    30 to "nidorina",
    31 to "nidoqueen",
    32 to "nidoranM",
    33 to "nidorino",
    34 to "nidoking",
    35 to "clefairy",
    36 to "clefable",
    37 to "vulpix",
    38 to "ninetales",
    39 to "jigglypuff",
    40 to "wigglytuff",
    41 to "zubat",
    42 to "golbat",
    43 to "oddish",
    44 to "gloom",
    45 to "vileplume",
    46 to "paras",
    47 to "parasect",
    48 to "venonat",
    49 to "venomoth",
    50 to "diglett",
    51 to "dugtrio",
    52 to "meowth",
    53 to "persian",
    54 to "psyduck",
    55 to "golduck",
    56 to "mankey",
    57 to "primeape",
    58 to "growlithe",
    59 to "arcanine",
    60 to "poliwag",
    61 to "poliwhirl",
    62 to "poliwrath",
    63 to "abra",
    64 to "kadabra",
    65 to "alakazam",
    66 to "machop",
    67 to "machoke",
    68 to "machamp",
    69 to "bellsprout",
    70 to "weepinbell",
    71 to "victreebel",
    72 to "tentacool",
    73 to "tentacruel",
    74 to "geodude",
    75 to "graveler",
    76 to "golem",
    77 to "ponyta",
    78 to "rapidash",
    79 to "slowpoke",
    80 to "slowbro",
    81 to "magnemite",
    82 to "magneton",
    83 to "farfetchd",
    84 to "doduo",
    85 to "dodrio",
    86 to "seel",
    87 to "dewgong",
    88 to "grimer",
    89 to "muk",
    90 to "shellder",
    91 to "cloyster",
    92 to "gastly",
    93 to "haunter",
    94 to "gengar",
    95 to "onix",
    96 to "drowzee",
    97 to "hypno",
    98 to "krabby",
    99 to "kingler",
    100 to "voltorb",
    101 to "electrode",
    102 to "exeggcute",
    103 to "exeggutor",
    104 to "cubone",
    105 to "marowak",
    106 to "hitmonlee",
    107 to "hitmonchan",
    108 to "lickitung",
    109 to "koffing",
    110 to "weezing",
    111 to "rhyhorn",
    112 to "rhydon",
    113 to "chansey",
    114 to "tangela",
    115 to "kangaskhan",
    116 to "horsea",
    117 to "seadra",
    118 to "goldeen",
    119 to "seaking",
    120 to "staryu",
    121 to "starmie",
    122 to "mrMime",
    123 to "scyther",
    124 to "jynx",
    125 to "electabuzz",
    126 to "magmar",
    127 to "pinsir",
    128 to "tauros",
    129 to "magikarp",
    130 to "gyarados",
    131 to "lapras",
    132 to "ditto",
    133 to "eevee",
    134 to "vaporeon",
    135 to "jolteon",
    136 to "flareon",
    137 to "porygon",
    138 to "omanyte",
    139 to "omastar",
    140 to "kabuto",
    141 to "kabutops",
    142 to "aerodactyl",
    143 to "snorlax",
    144 to "articuno",
    145 to "zapdos",
    146 to "moltres",
    147 to "dratini",
    148 to "dragonair",
    149 to "dragonite",
    150 to "mewtwo",
    151 to "mew"
)
var jogador1 = ""
var jogador2 = ""


fun main() {
    getNomePlayers()
    pokemonsJogador1 = formarTime(jogador1);
    pokemonsJogador2 = formarTime(jogador2);
    determinaVencedor()
}

fun determinaVencedor() {
    var vitoriasP1 = 0
    var vitoriasP2 = 0
    for (i in 0..2) {
        println("\n\n============= ${i + 1}ª batalha =============")
        val (nome1, tipos1) = pokemonsJogador1[i]
        val (nome2, tipos2) = pokemonsJogador2[i]

        println("${pokemonsJogador1[i].first}($jogador1) VS ${pokemonsJogador2[i].first}($jogador2)")

        val resultado = batalha(tipos1, tipos2)

        when (resultado) {
            1 -> {
                println("Vencedor $jogador1")
                vitoriasP1++
            }

            2 -> {
                println("Vencedor $jogador2")
                vitoriasP2++
            }

            else -> println("Empate")
        }
    }
    println("\n\n=========== Resultado Final ===========")
    when {
        vitoriasP1 > vitoriasP2 -> println("🏆Vencedor $jogador1🏆")
        vitoriasP1 < vitoriasP2 -> println("🏆Vencedor $jogador2🏆")
        else -> println("Empate")
    }
    println("=======================================")
}

fun climaBonus(tipo: String, clima: Clima): Double {
    return when (clima) {
        Clima.CHUVA -> if (tipo == "Água") 1.2 else if (tipo == "Fogo") 0.8 else 1.0
        Clima.ENSOLARADO -> if (tipo == "Fogo") 1.2 else if (tipo == "Água") 0.8 else 1.0
        Clima.NEBLINA -> 0.9
        else -> 1.0
    }
}


fun batalha(tipos1: Map<String, List<String>>, tipos2: Map<String, List<String>>): Int {

    val dano = getDamage(tipos1, tipos2)
    val (damageP1, damageP2) = dano
    var lifeP1 = (90..120).random()
    var lifeP2 = (90..120).random()
    var round = 1

    fun calcularDano(atacante: Pokemon, defensor: Pokemon, clima: Clima): Int {
        var bonus = when (atacante.personalidade) {
            "Agressivo" -> 1.2
            "Defensivo" -> 0.9
            else -> 1.0
        }

        bonus += atacante.vinculo * 0.005  // vínculo aumenta dano
        bonus *= climaBonus(atacante.tipo, clima) // <-- 🌦️ Aqui o clima afeta

        val dano = ((atacante.forca * bonus) - defensor.defesa).toInt()
        return dano.coerceAtLeast(1)
    }
    val clima = Clima.entries.random()
    println("☁️ Clima atual: $clima")

    println("========= Batalha Pokémon Iniciada! =========")
    println("Pokemon de $jogador1: ${lifeP1}HP | Dano: $damageP1")
    println("Pokemon de $jogador2: ${lifeP2}HP | Dano: $damageP2")
    println("---------------------------------------------")

    while (lifeP1 > 0 && lifeP2 > 0) {
        println("\n================ Round $round ================")

        // Vez do jogador 1
        val criticoP1 = verificaCritico()

        println("Pokemon de $jogador1 ataca! ${if (criticoP1 > 1) "CRÍTICO! " else ""}[Dano: ${damageP1 * criticoP1}]")

        lifeP2 -= damageP1 * criticoP1

        println("HP do pokemon de $jogador2: ${maxOf(lifeP2, 0)}")
        if (lifeP2 <= 0) break

        // Vez do jogador 2
        val criticoP2 = verificaCritico()

        println("\nPokemon de $jogador2 contra-ataca! ${if (criticoP2 > 1) "CRÍTICO! " else ""}[Dano: ${damageP2 * criticoP2}]")

        lifeP1 -= damageP2 * criticoP2

        println("HP do pokemon de $jogador1: ${maxOf(lifeP1, 0)}")

        round++
        println("----------------------------------------------")
    }

    return when {
        lifeP1 > lifeP2 -> {
            println("\n VITÓRIA DE $jogador1!")
            1
        }

        lifeP2 > lifeP1 -> {
            println("\n VITÓRIA DE $jogador2!")
            2
        }

        else -> {
            println("\n EMPATE!")
            0
        }
    }
}

private fun Any.coerceAtLeast(i: Int): Int {

    return TODO("Provide the return value")
}

private fun Any.toInt(): Any {

    return TODO("Provide the return value")
}


private operator fun Any.minus(defesa: Any): Any {

    return TODO("Provide the return value")
}

private operator fun Unit.minus(defesa: Any): Any {

    return TODO("Provide the return value")
}

private operator fun Double.plusAssign(any: Any) {

}

private operator fun Any.times(bonus: Double): Any {

    return TODO("Provide the return value")
}


fun verificaCritico(): Int {
    val critico = ((1..24).random()) == 1
    return if (critico) 2 else 1
}


fun getDamage(tipos1: Map<String, List<String>>, tipos2: Map<String, List<String>>): IntArray {
    var damageP1 = (30..40).random()
    var damageP2 = (30..40).random()
    var multiplierP1 = 1;
    var multiplierP2 = 1;

    for (tipoP1 in tipos1.keys) {
        val superEfetivoContra = tipos1[tipoP1] ?: emptyList()
        for (tipoP2 in tipos2.keys) {
            if (superEfetivoContra.contains(tipoP2)) {
                multiplierP1 *= 2
            }
        }
    }

    for (tipoP2 in tipos2.keys) {
        val superEfetivoContra = tipos2[tipoP2] ?: emptyList()
        for (tipoP1 in tipos1.keys) {
            if (superEfetivoContra.contains(tipoP1)) {
                multiplierP2 *= 2
            }
        }
    }

    return intArrayOf(damageP1 * multiplierP1, damageP2 * multiplierP2);
}


fun formarTime(player: String): MutableList<Pair<String, Map<String, List<String>>>> {
    getListaPokemons()
    val pokemonsEscolhidos = mutableListOf<Pair<String, Map<String, List<String>>>>()
    var num: Int
    repeat(3) {
        do {
            println("$player, digite o pokemons que deseja, entre os número 1–151.: ")
            println("Ex: 1 - Bulbasaur")
            num = readLine()?.toIntOrNull() ?: -1
        } while (num < 1 || num > 151)
        val nome = listaNomesPokemons[num]!!
        var tipoMap = emptyMap<String, List<String>>()
        if (pokedex[num] != null) {
            tipoMap = pokedex[num]?.mapValues { it.value ?: emptyList() } ?: emptyMap()
        }
        pokemonsEscolhidos.add(nome to tipoMap)
    }
    return pokemonsEscolhidos
}


fun getNomePlayers() {
    val regex = Regex("^[A-Za-z]+\$")
    do {
        println("Digite o nome do primeiro player:")
        jogador1 = readlnOrNull() ?: "-1"
    } while (!(jogador1.matches(regex)))
    do {
        println("Digite o nome do segundo player:")
        jogador2 = readlnOrNull() ?: "-1"
    } while (!(jogador2.matches(regex)))
}

fun getListaPokemons() {
    println("====== Pokemons Disponiveis para o time =======")
    val listEscolha = mutableListOf<String>()
    for (i in 1..151) {
        println("$i : ${listaNomesPokemons[i]}")
    }
    println("===============================================")
}


class Pokemons {

    private val superEfetivo = mapOf(

        "NORMAL" to emptyList<String>(),
        "FOGO" to listOf("GRAMA", "GELO", "INSETO"),
        "ÁGUA" to listOf("FOGO", "TERRA", "PEDRA"),
        "ELÉTRICO" to listOf("ÁGUA", "VOADOR"),
        "GRAMA" to listOf("ÁGUA", "TERRA", "PEDRA"),
        "GELO" to listOf("GRAMA", "TERRA", "VOADOR", "DRAGÃO"),
        "LUTADOR" to listOf("NORMAL", "GELO", "PEDRA"),
        "VENENO" to listOf("GRAMA", "INSETO"),
        "TERRA" to listOf("FOGO", "ELÉTRICO", "VENENO", "PEDRA"),
        "VOADOR" to listOf("GRAMA", "LUTADOR", "INSETO"),
        "PSÍQUICO" to listOf("LUTADOR", "VENENO"),
        "INSETO" to listOf("GRAMA", "VENENO", "PSÍQUICO"),
        "PEDRA" to listOf("FOGO", "GELO", "VOADOR", "INSETO"),
        "FANTASMA" to listOf("PSÍQUICO", "FANTASMA"),
        "DRAGÃO" to listOf("DRAGÃO")
    )

val bulbasaur    = mapOf(
    "GRAMA" to  listOf("AGUA, TERRA, PEDRA"),// a minha chave é uma "string"
    "VENENO" to  listOf("FADA, PLANTA"),//meu valor é uma lista de "string"
    //chave TO valor
)
    val ivysaur = mapOf(
        "GRAMA" to  listOf("AGUA", "TERRA", "PEDRA"),
    )
    val venusaur = mapOf(
        "GRAMA" to  listOf("AGUA, TERRA, PEDRA"),
        "VENENO" to  listOf("FADA, PLANTA"),
    )
    val charmander = mapOf(
        "FOGO" to  listOf("FOGO", "TERRA", "PEDRA"),
    )
    val charmeleon = mapOf(
        "FOGO" to  listOf("FOGO", "TERRA", "PEDRA"),
    )
    val charizard = mapOf(
        "FOGO" to  listOf("FOGO", "TERRA", "PEDRA"),
    )
    val squirtle = mapOf(
        "AGUA" to  listOf("ELETRICO", "GRAMA"),
    )
    val wartortle = mapOf(
        "AGUA" to  listOf("ELETRICO", "GRAMA"),
    )
    val blastoise = mapOf(
        "AGUA" to  listOf("ELETRICO", "GRAMA"),
    )
    val caterpie = mapOf(
        "INSETO" to  listOf("FOGO", "VODOR", "PEDRA"),
    )
    val metapod = mapOf(
        "INSETO" to  listOf("FOGO", "VODOR", "PEDRA"),
    )
    val butterfree = mapOf(
        "INSETO" to  listOf("FOGO","VODOR", "PEDRA"),
    )
    val weedle = mapOf(
        "INSETO" to  listOf("FOGO", "VODOR", "PEDRA"),
        "VENENO" to  listOf("TERRA, PSIQUICO"),

        )
    val beedrill = mapOf(
        "INSETO" to  listOf("FOGO", "VODOR", "PEDRA"),
        "VENENO" to listOf("TERRA", "PSIQUICO")
    )
    val pidgey = mapOf(
        "NORMAL" to  listOf("LUTA"),
        "VOADOR" to  listOf("ELETRICO", "ROCHA", "GEL"),
    )
    val pidgeotto = mapOf(
        "NORMAL" to  listOf("LUTA"),
        "VOADOR" to  listOf("ELETRICO", "ROCHA"),
    )
    val pidgeot = mapOf(
        "NORMAL" to  listOf("LUTA"),
        "VOADOR" to  listOf("ELETRICO", "ROCHA", "GEL"),
    )
    val rattata = mapOf(
        "NORMAL" to  listOf("LUTA"),
    )
    val raticate = mapOf(
        "NORMAL" to  listOf("LUTA"),
    )
    val spearow = mapOf(
        "NORMAL" to  listOf("LUTA"),
        "VOADOR" to  listOf("ELETRICO","ROCHA", "GEL"),
    )
    val fearow = mapOf(
        "NORMAL" to  listOf("LUTA"),
        "VOADOR" to  listOf("ELETRICO", "ROCHA", "GEL"),
    )
    val ekans = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val arbok = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val pikachu = mapOf(
        "ELETRICO" to  listOf("AGUA", "VOADOR"),
    )
    val raichu = mapOf(
        "ELETRICO" to  listOf("AGUA", "VOADOR"),
    )
    val sandshrew = mapOf(
        "TERRA" to  listOf("AGUA", "GEL", "GRAMA"),
    )
    val sandslash = mapOf(
        "TERRA" to  listOf("AGUA", "GEL", "GRAMA"),
    )
    val nidoranm = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val nidorina = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val nidoqueen =     mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val  nidoranf = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val nidorino = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val nidoking = mapOf(
        "VENENO" to  listOf("TERRA", "PSIQUICO"),
    )
    val clefairy = mapOf(
        "FADA" to  listOf("VENENO", "INSETO"),
    )
    val clefable = mapOf(
        "FADA" to  listOf("VENENO", "INSETO"),
    )
    val vulpix = mapOf(
        "FOGO" to  listOf("AGUA", "PEDRA", "TERRA"),
    )
    val ninetales = mapOf(
        "FOGO" to  listOf("AGUA", "PEDRA", "TERRA"),
    )
    val machop = mapOf(
        "LUTA" to  listOf("NORMAL", "GEL", "PEDRA", "ACO"),
    )
    val machoke = mapOf(
        "LUTA" to  listOf("NORMAL", "GEL", "PEDRA", "ACO"),
    )
    val machamp = mapOf(
        "LUTA" to  listOf("NORMAL", "GEL", "PEDRA", "ACO"),
    )
    val bellsprout = mapOf(
        "GRAMA" to listOf("AGUA", "TERA", "PEDRA"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val weepinbell = mapOf(
        "GRAMA" to listOf("AGUA", "TERA", "PEDRA"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val victreebel = mapOf(
        "GRAMA" to listOf("AGUA", "TERA", "PEDRA"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val tentacool = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val tentacruel = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val geodude = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "GEL", "LUTA", "ACO"),
        "TERA" to listOf("GEL"),
    )
    val graveler = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "GEL", "LUTA", "ACO"),
        "TERA" to listOf("GEL"),
    )
    val golem = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "GEL", "LUTA", "ACO"),
        "TERA" to listOf("GEL"),
    )
    val ponyta = mapOf(
        "FOGO" to listOf("AGUA", "PEDRA", "TERA"),
    )
    val rapidash = mapOf(
        "FOGO" to listOf("AGUA", "PEDRA", "TERA"),
    )
    val magnemite = mapOf(
        "ELETRICO" to listOf("AGUA", "GEL", "GRAMA"),
        "ACO" to listOf("FANTASMA"),
    )
    val magneton = mapOf(
        "ELETRICO" to listOf("AGUA", "GEL", "GRAMA"),
        "ACO" to listOf("FANTASMA"),
    )
    val farfetchd = mapOf(
        "VOADOR" to listOf("ELETRICO", "GEL", "PEDRA"),
        "NORMAL" to listOf("LUTA"),
    )
    val doduo = mapOf(
        "NORMAL" to listOf("LUTA"),
        "VOADOR" to listOf("ELETRICO", "ROCHA", "GEL"),
    )
    val dodrio = mapOf(
        "NORMAL" to listOf("LUTA"),
        "VOADOR" to listOf("ELETRICO", "ROCHA", "GEL"),
    )
    val seel = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "GEL" to listOf("FOGO", "LUTA", "ROCHA"),
    )
    val dewgong = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "GEL" to listOf("FOGO", "LUTA", "ROCHA"),
    )
    val grimer = mapOf(
        "VENENO" to listOf("TERRA", "PSIQUICO"),
    )
    val muk = mapOf(
        "VENENO" to listOf("TERRA", "PSIQUICO"),
    )
    val shellder = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "GEL" to listOf("FOGO", "LUTA", "ROCHA"),
    )
    val cloyster = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "GEL" to listOf("FOGO", "LUTA", "ROCHA"),
    )
    val gastly = mapOf(
        "FANTASMA" to listOf("NORMAL", "PSIQUICO"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val haunter = mapOf(
        "FANTASMA" to listOf("NORMAL", "PSIQUICO"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val gengar = mapOf(
        "FANTASMA" to listOf("NORMAL", "PSIQUICO"),
        "VENENO" to listOf("PSIQUICO"),
    )
    val onix = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "GEL", "LUTA", "ACO"),
        "TERA" to listOf("GEL"),
    )
    val drowzee = mapOf(
        "PSIQUICO" to listOf("PSIQUICO"),
    )
    val hypno = mapOf(
        "PSIQUICO" to listOf("PSIQUICO"),
    )
    val krabby = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val kingler = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val exeggcute = mapOf(
        "GRAMA" to listOf("AGUA", "TERA", "PEDRA"),
        "PSIQUICO" to listOf("INSETO"),
    )

    val cubone = mapOf(
        "TERA" to listOf("AGUA", "GEL", "GRAMA"),
    )
    val marowak = mapOf(
        "TERA" to listOf("AGUA", "GEL", "GRAMA"),
    )
    val horsea = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val seadra = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val goldeen = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val seaking = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val staryu = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val starmie = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val mrMime = mapOf(
        "PSIQUICO" to listOf("PSIQUICO"),
    )
    val scyther = mapOf(
        "INSETO" to listOf("FOGO", "VODOR", "PEDRA"),
    )
    val jynx = mapOf(
        "GEL" to listOf("FOGO", "ACO", "PEDRA"),
        "PSIQUICO" to listOf("INSETO"),
    )
    val electabuzz = mapOf(
        "ELETRICO" to listOf("AGUA", "VOADOR"),
    )
    val magmar = mapOf(
        "FOGO" to listOf("AGUA", "PEDRA", "TERA"),
    )
    val pinsir = mapOf(
        "INSETO" to listOf("FOGO", "VODOR", "PEDRA"),
    )
    val tauros = mapOf(
        "NORMAL" to listOf("LUTA"),
    )
    val magikarp = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val gyarados = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val lapras = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "GEL" to listOf("FOGO", "LUTA", "ROCHA"),
    )
    val ditto = mapOf(
        "NORMAL" to listOf("LUTA"),
    )
    val eevee = mapOf(
        "NORMAL" to listOf("LUTA"),
    )
    val vaporeon = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
    )
    val jolteon = mapOf(
        "ELETRICO" to listOf("AGUA", "VOADOR"),
    )
    val flareon = mapOf(
        "FOGO" to listOf("AGUA", "PEDRA", "TERA"),
    )
    val espeon = mapOf(
        "PSIQUICO" to listOf("PSIQUICO"),
    )
    val umbreon = mapOf(
        "SOMBRIO" to listOf("FADA"),
    )
    val leafeon = mapOf(
        "GRAMA" to listOf("AGUA", "TERA", "PEDRA"),
    )
    val glaceon = mapOf(
        "GEL" to listOf("FOGO", "ACO", "PEDRA"),
    )
    val lckitung = mapOf(
        "NORMAL" to listOf("LUTA"),
    )
    val lickitung = mapOf(
        "NORMAL" to listOf("LUTA"),
    )

    val koffing = mapOf(
        "VENENO" to listOf("PSIQUICO"),
    )

    val weezing = mapOf(
        "VENENO" to listOf("PSIQUICO"),
    )

    val rhyhorn = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "LUTA"),
        "TERRA" to listOf("AGUA", "GELO", "GRAMA"),
    )

    val rhydon = mapOf(
        "ROCHA" to listOf("AGUA", "GRAMA", "LUTA"),
        "TERRA" to listOf("AGUA", "GELO", "GRAMA"),
    )

    val chansey = mapOf(
        "NORMAL" to listOf("LUTA"),
    )

    val tangela = mapOf(
        "GRAMA" to listOf("FOGO", "GELO", "VENENO", "VOADOR", "INSETO"),
    )

    val kangaskhan = mapOf(
        "NORMAL" to listOf("LUTA"),
    )

    val horner = mapOf(
        "ÁGUA" to listOf("ELETRICO", "GRAMA"),
    )

    val golbat = mapOf(
        "VENENO" to listOf("PSIQUICO"),
        "VOADOR" to listOf("ELETRICO", "GELO", "PEDRA"),
    )

    val exeggutor = mapOf(
        "GRAMA" to listOf("FOGO", "GELO", "VENENO", "VOADOR", "INSETO"),
        "PSIQUICO" to listOf("FANTASMA", "INSETO", "SOMBRIO"),
    )

    val sylveon = mapOf(
        "FADA" to listOf("VENENO", "INSETO"),
    )
    val kakuna = mapOf(
        "INSETO" to listOf("FOGO", "PEDRA", "VOADOR")
    )
    val nidoran_f = mapOf(
        "VENENO" to listOf("TERRA", "PSIQUICO")
    )
    val nidoran_m = mapOf(
        "VENENO" to listOf("TERRA", "PSIQUICO")
    )
    val jigglypuff = mapOf(
        "FADA" to listOf("VENENO", "INSETO")
    )
    val wigglytuff = mapOf(
        "FADA" to listOf("VENENO", "INSETO")
    )
    val zubat = mapOf(
        "VENENO" to listOf("PSIQUICO"),
        "VOADOR" to listOf("ELETRICO", "ROCHA")
    )
    val oddish = mapOf(
        "GRAMA" to listOf("FOGO", "GELO", "VENENO")
    )
    val gloom = mapOf(
        "GRAMA" to listOf("FOGO", "GELO", "VENENO")
    )
    val vileplume = mapOf(
        "GRAMA" to listOf("FOGO", "GELO", "VENENO")
    )
    val paras = mapOf(
        "INSETO" to listOf("FOGO", "PEDRA"),
        "GRAMA" to listOf("VOADOR", "VENENO")
    )
    val parasect = mapOf(
        "INSETO" to listOf("FOGO", "PEDRA"),
        "GRAMA" to listOf("VOADOR", "VENENO")
    )
    val venonat = mapOf(
        "INSETO" to listOf("FOGO", "PEDRA", "VOADOR"),
        "VENENO" to listOf("PSIQUICO")
    )
    val venomoth = mapOf(
        "INSETO" to listOf("FOGO", "PEDRA", "VOADOR"),
        "VENENO" to listOf("PSIQUICO")
    )
    val diglett = mapOf(
        "TERRA" to listOf("AGUA", "GELO", "GRAMA")
    )
    val dugtrio = mapOf(
        "TERRA" to listOf("AGUA", "GELO", "GRAMA")
    )
    val meowth = mapOf(
        "NORMAL" to listOf("LUTA")
    )
    val persian = mapOf(
        "NORMAL" to listOf("LUTA")
    )
    val psyduck = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA")
    )
    val golduck = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA")
    )
    val mankey = mapOf(
        "LUTA" to listOf("PSIQUICO", "VOADOR")
    )
    val primeape = mapOf(
        "LUTA" to listOf("PSIQUICO", "VOADOR")
    )
    val growlithe = mapOf(
        "FOGO" to listOf("AGUA", "TERRA", "PEDRA")
    )
    val arcanine = mapOf(
        "FOGO" to listOf("AGUA", "TERRA", "PEDRA")
    )
    val poliwag = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA")
    )
    val poliwhirl = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA")
    )
    val poliwrath = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "LUTA" to listOf("PSIQUICO", "VOADOR")
    )
    val abra = mapOf(
        "PSIQUICO" to listOf("FANTASMA", "INSETO")
    )
    val kadabra = mapOf(
        "PSIQUICO" to listOf("FANTASMA", "INSETO")
    )
    val alakazam = mapOf(
        "PSIQUICO" to listOf("FANTASMA", "INSETO")
    )
    val slowpoke = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "PSIQUICO" to listOf("FANTASMA")
    )
    val slowbro = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "PSIQUICO" to listOf("FANTASMA")
    )
    val voltorb = mapOf(
        "ELETRICO" to listOf("TERRA")
    )
    val electrode = mapOf(
        "ELETRICO" to listOf("TERRA")
    )
    val hitmonlee = mapOf(
        "LUTA" to listOf("PSIQUICO", "VOADOR")
    )
    val hitmonchan = mapOf(
        "LUTA" to listOf("PSIQUICO", "VOADOR")
    )
    val porygon = mapOf(
        "NORMAL" to listOf("LUTA")
    )
    val omanyte = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "ROCHA" to listOf("GRAMA", "LUTA")
    )
    val omastar = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "ROCHA" to listOf("GRAMA", "LUTA")
    )
    val kabuto = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "ROCHA" to listOf("GRAMA", "LUTA")
    )
    val kabutops = mapOf(
        "AGUA" to listOf("ELETRICO", "GRAMA"),
        "ROCHA" to listOf("GRAMA", "LUTA")
    )
    val aerodactyl = mapOf(
        "ROCHA" to listOf("GELO", "AGUA", "ELETRO"),
        "VOADOR" to listOf("ELETRICO", "GELO")
    )
    val snorlax = mapOf(
        "NORMAL" to listOf("LUTA")
    )
    val articuno = mapOf(
        "GELO" to listOf("FOGO", "PEDRA"),
        "VOADOR" to listOf("ELETRICO", "GELO")
    )
    val zapdos = mapOf(
        "ELETRICO" to listOf("TERRA"),
        "VOADOR" to listOf("ROCHA", "GELO")
    )
    val moltres = mapOf(
        "FOGO" to listOf("AGUA", "PEDRA"),
        "VOADOR" to listOf("ELETRICO", "ROCHA")
    )
    val dratini = mapOf(
        "DRAGAO" to listOf("GELO", "FADA")
    )
    val dragonair = mapOf(
        "DRAGAO" to listOf("GELO", "FADA")
    )
    val dragonite = mapOf(
        "DRAGAO" to listOf("GELO", "FADA"),
        "VOADOR" to listOf("ELETRICO", "ROCHA")
    )
    val mewtwo = mapOf(
        "PSIQUICO" to listOf("FANTASMA", "INSETO")
    )
    val mew = mapOf(
        "PSIQUICO" to listOf("FANTASMA", "INSETO")
    )}
